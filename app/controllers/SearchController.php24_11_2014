<?php

class SearchController extends \BaseController {

    /**
     * Display a listing of the resource.
     *
     * @return Response
     */
    function __construct()
    {
        $this->beforeFilter('auth');
        if( isset(Sentry::getUser()->id) )
            $this->_user = User::find(Sentry::getUser()->id);
    }
    
    public function index()
    {       
//        $data = [ 'workTypes'   => WorkType::has('user')->get(),
//            'sports'            => Sport::has('user')->get(),
//            'sportLeves'        => SportLevel::has('user')->get(),
//            'sportPositions'    => SportPosition::has('user')->get(),
//            'workOptions'       => Option::has('user')->where('category_id', '=', 1)->get(),
//            'ethnicities'       => Ethnicity::all(),
//            'academicOptions'   => Option::has('user')->where('category_id', '=', 2)->get(),
//            'skillOptions'      => Option::where('subcategory_id', '=', 9)->get(),
//            'languages'         => Language::orderBy('name', 'ASC')->get(),
//            'languageLevels'    => LanguageLevel::all(),
//            'socialPositions'   => SocialPosition::has('user')->get(),
//            'socialCategories'  => SocialCategory::has('user')->get(),
//            'degreeTypes'       => DegreeType::has('user')->get(),
//            'degreeResults'     => DegreeResult::has('user')->get(),
//            'degreeSubjects'    => DegreeSubject::has('user')->get(),
//            'universities'      => University::has('user')->get(),
//            'socialCategories'  => SocialCategory::has('user')->get(),
//            'socialPositions'   => SocialPosition::has('user')->get(),
//            'workDurations'     => WorkDuration::has('user')->get(),
//            'usersCount'        => User::where('activated', '=', 1)->count(),
//            'campaign'          => Input::get('campaign', 0),
//        ];
        $opportunity_details = '';
        $usersCount        = User::where('activated', '=', 1)->where('group_id', '=', 1)->count();
        if(Session::has('opportunity'))
        {
            $oppr_arr = array();
            $locations_array_result ='';
            //$locations = array();
            //$opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->get();
            $opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->with('workType')->with('locations')->with('workSector')->get();
            
            foreach($opportunity_details as $opportunity_detail)
                $oppr_arr = $opportunity_detail;
            //echo $oppr_arr->id." - ";
            //print_r($oppr_arr['locations']);
            foreach ($oppr_arr['locations'] as $location)
            {
                $locations_array = $location;
                $locations_array_result .= $locations_array->id.",";
            }
            $locations_array_result = substr($locations_array_result, 0, -1);
            //echo $locations_array_result;die();
            if($oppr_arr->opportunity_type==1)
            {
                $opportunity_date = $oppr_arr->opportunity_date;
                //$opportunity_time = explode($opportunity_date);
                $locations_array_result = explode(",",$locations_array_result);
                $usersCount = User::where('activated', '=', 1)->where('group_id', '=', 1)->where('availability_date', '<=', $opportunity_date);
                //print_r($locations_array_result);die();
                foreach ($locations_array_result as $param)
                {
                    $usersCount = $usersCount->whereHas('location', function($q) use($param){
                        $q->where('location_id', '=', $param );
                    });
                }
                //$usersCount = $usersCount->count();
                //$sqldata = $usersCount->toSql();
                //echo $sqldata;die();
                $users = $usersCount->get();
                
                $usersCount = $users->count();
            }
            
            //echo $opportunity_date;
            //die();
        }
        $data = [ 'workTypes'   => WorkType::where('approved', '=', 1)->get(),
            'workOptions'       => Option::where('category_id', '=', 1)->get(),
            'workDurations'     => WorkDuration::all(),
            'sports'            => Sport::all(),
            'sportNames'        => SportName::where('approved', '=', 1)->get(),
            'sportLevels'       => SportLevel::where('approved', '=', 1)->get(),
            'sportPositions'    => SportPosition::all(),
            'ethnicities'       => Ethnicity::all(),
            'academicOptions'   => Option::where('category_id', '=', 2)->get(),
            'skillOptions'      => Skill::with('SkillGroup')->get(),
            'languages'         => LanguageName::orderBy('name', 'ASC')->get(),
            'languageLevels'    => LanguageLevel::all(),
            'degreeTypes'       => DegreeType::where('approved', '=', 1)->get(),
            'degreeResults'     => DegreeResult::where('approved', '=', 1)->get(),
            'degreeSubjects'    => DegreeSubject::where('approved', '=', 1)->get(),
            'schoolOptions'     => Option::where('subcategory_id', '=', 5)->with('group')->get(),
            'universities'      => University::all(),
            'socialCategories'  => SocialCategory::where('approved', '=', 1)->get(),
            'socialPositions'   => SocialPosition::where('approved', '=', 1)->get(),
            'capabilities'      => Option::where('subcategory_id', '=', 10)->with('group')->get(),
            'attributes'        => Option::where('group_id', '=', 10)->with('group')->get(),
            'experience'        => Option::where('subcategory_id', '=', 10)->with('group')->get(),
            'usersCount'        => $usersCount,
            'campaign'          => Input::get('campaign', 0),
            'opporDetails'      => $opportunity_details,
        ];

//        return View::make('db_search', $data );
        return View::make('db_search_new_dynamic', $data );
    }
    
    public function pooledit($id)
    {
        $employer_id = $this->_user->id;
        
        $candidatesPools = CandidatesPool::with('option')->with('users')->with('social')->with('language')->find($id);
	$users = [];
        $usercount = 0;
        $workSectors = [];
        foreach ($candidatesPools->users as $user) {
            $users[] = $user->id;
            $usercount++;
        }
        
        //echo $employer_id;die();
        $opportunity_details = '';
        $usersCount        = User::where('activated', '=', 1)->where('group_id', '=', 1)->count();
        if(Session::has('opportunity'))
        {
            $oppr_arr = array();
            $locations_array_result ='';
            //$locations = array();
            //$opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->get();
            $opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->with('workType')->with('locations')->with('workSector')->get();
            
            foreach($opportunity_details as $opportunity_detail)
                $oppr_arr = $opportunity_detail;
            //echo $oppr_arr->id." - ";
            //print_r($oppr_arr['locations']);
            foreach ($oppr_arr['locations'] as $location)
            {
                $locations_array = $location;
                $locations_array_result .= $locations_array->id.",";
            }
            $locations_array_result = substr($locations_array_result, 0, -1);
            //echo $locations_array_result;die();
            if($oppr_arr->opportunity_type==1)
            {
                $opportunity_date = $oppr_arr->opportunity_date;
                //$opportunity_time = explode($opportunity_date);
                $locations_array_result = explode(",",$locations_array_result);
                $usersCount = User::where('activated', '=', 1)->where('group_id', '=', 1)->where('availability_date', '<=', $opportunity_date);
                //print_r($locations_array_result);die();
                foreach ($locations_array_result as $param)
                {
                    $usersCount = $usersCount->whereHas('location', function($q) use($param){
                        $q->where('location_id', '=', $param );
                    });
                }
                //$usersCount = $usersCount->count();
                //$sqldata = $usersCount->toSql();
                //echo $sqldata;die();
                $users = $usersCount->get();
                
                $usersCount = $users->count();
            }
            
            //echo $opportunity_date;
            //die();
        }
        $data = [
            'workTypes'   => WorkType::where('approved', '=', 1)->get(),
            'workOptions'       => Option::where('category_id', '=', 1)->get(),
            'workDurations'     => WorkDuration::all(),
            'sports'            => Sport::all(),
            'sportNames'        => SportName::where('approved', '=', 1)->get(),
            'sportLevels'       => SportLevel::where('approved', '=', 1)->get(),
            'sportPositions'    => SportPosition::all(),
            'ethnicities'       => Ethnicity::all(),
            'academicOptions'   => Option::where('category_id', '=', 2)->get(),
            'skillOptions'      => Skill::with('SkillGroup')->get(),
            'languages'         => LanguageName::orderBy('name', 'ASC')->get(),
            'languageLevels'    => LanguageLevel::all(),
            'degreeTypes'       => DegreeType::where('approved', '=', 1)->get(),
            'degreeResults'     => DegreeResult::where('approved', '=', 1)->get(),
            'degreeSubjects'    => DegreeSubject::where('approved', '=', 1)->get(),
            'schoolOptions'     => Option::where('subcategory_id', '=', 5)->with('group')->get(),
            'universities'      => University::all(),
            'socialCategories'  => SocialCategory::where('approved', '=', 1)->get(),
            'socialPositions'   => SocialPosition::where('approved', '=', 1)->get(),
            'capabilities'      => Option::where('subcategory_id', '=', 10)->with('group')->get(),
            'attributes'        => Option::where('group_id', '=', 10)->with('group')->get(),
            'experience'        => Option::where('subcategory_id', '=', 10)->with('group')->get(),
            'usersCount'        => $usercount,
            'campaign'          => Input::get('campaign', 0),
            'opporDetails'      => $opportunity_details,
        ];
        
        //foreach ($opportunityAvail->workSector as $worksector) {
        //    $workSectors[] = $worksector->id;
        //}
        //echo $usercount;die();
	$data['candidatesPools'] = $candidatesPools;
        //print_r($data['candidatesPools']);
//        return View::make('db_search', $data );
        return View::make('db_search_new_dynamic_edit', $data );
    }
    
    public function getCount()
    {
        $u = User::where('activated', '=', 1)->where('group_id', '=', 1);
        $i = 0;
        
        if(Session::has('opportunity'))
        {
            $oppr_arr = array();
            $locations_array_result ='';
            //$locations = array();
            //$opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->get();
            $opportunity_details = Opportunity::where('id', '=', Session::get('opportunity'))->with('workType')->with('locations')->with('workSector')->get();
            foreach($opportunity_details as $opportunity_detail)
                $oppr_arr = $opportunity_detail;
            //echo $oppr_arr->id." - ";
            //print_r($oppr_arr['locations']);
            foreach ($oppr_arr['locations'] as $location)
            {
                $locations_array = $location;
                $locations_array_result .= $locations_array->id.",";
            }
            $locations_array_result = substr($locations_array_result, 0, -1);
            //echo $locations_array_result;die();
            if($oppr_arr->opportunity_type==1)
            {
                $opportunity_date = $oppr_arr->opportunity_date;
                //$opportunity_time = explode($opportunity_date);
                $locations_array_result = explode(",",$locations_array_result);
                $u = User::where('activated', '=', 1)->where('group_id', '=', 1)->where('availability_date', '<=', $opportunity_date);
                //print_r($locations_array_result);die();
                foreach ($locations_array_result as $param)
                {
                    $u = $u->whereHas('location', function($q) use($param){
                        $q->where('location_id', '=', $param );
                    });
                }
                //$usersCount = $usersCount->count();
                //$sqldata = $usersCount->toSql();
                //echo $sqldata;die();
                //$u = $usersCount->get();
                
                //$u = $users->count();
            }
            
            //echo $opportunity_date;
            //die();
        }
        
        $languages              = Input::get('language', []) ;
        $languageLevels         = Input::get('language-level', []);
        $workOptions            = Input::get('work_option', []);
        $capabilities           = Input::get('capabilities', []);
        $experience             = Input::get('experience', []);
        $workTypes              = Input::get('work_type_option', []);
        $socialCategory         = Input::get('society_category', []);
        $socialPosition         = Input::get('society_position', []);
        $attributes             = Input::get('attributes', []);
        $sportLevels            = Input::get('sport_level', []);
        $sportNames             = Input::get('sport_name', []);
        $skills                 = Input::get('skills', []);
        $degreeTypeC            = Input::get('degree_type', []);
        $degree_resultC         = Input::get('degree_result', []);
        $schoolSubject          = Input::get('school-subject', []);
        //$universityYearFrom     = Input::get('university_from');
        //$universityYearTo       = Input::get('university_to', []);
        $universitySubject      = Input::get('university-subject', []);
        $minWorkDuration        = Input::get('min-work-length', [0]);
        $maxWorkDuration        = Input::get('max-work-length', [0]);
        $minWorkDuration        = (int)$minWorkDuration[0];
        $maxWorkDuration        = (int)$maxWorkDuration[0];
        
        if( $minWorkDuration > 0 && $maxWorkDuration > 0 )
        {
            $u = $u->whereHas('work', function($q) use($minWorkDuration, $maxWorkDuration){
                $q->whereBetween('work_duration_id', array($minWorkDuration, $maxWorkDuration) );
            });
        }elseif($minWorkDuration > 0 )
        {
            $u = $u->whereHas('work', function($q) use($minWorkDuration){
                $q->where('work_duration_id', '=', $minWorkDuration );
            });
        }elseif($maxWorkDuration > 0)
        {
            $u = $u->whereHas('work', function($q) use($maxWorkDuration){
                $q->where('work_duration_id', '=', $maxWorkDuration );
            });
        }
        
        //if( $universityYearFrom > 0 && $universityYearTo > 0 )
        //{
        //    $u = $u->whereHas('degree', function($q) use($universityYearFrom, $universityYearTo){
        //        $q->whereBetween('degree_year', array($universityYearFrom, $universityYearTo) );
        //    });
        //}elseif($universityYearFrom > 0 )
        //{
        //    $u = $u->whereHas('degree', function($q) use($universityYearFrom){
        //        $q->where('degree_year', '=', $universityYearFrom );
        //    });
        //}elseif($universityYearTo > 0)
        //{
        //    $u = $u->whereHas('degree', function($q) use($universityYearTo){
        //        $q->where('degree_year', '=', $universityYearTo );
        //    });
        //}
        
        $options = array_merge($workOptions, $experience, $capabilities, $attributes);
        foreach ($options as $param)
        {
            $u = $u->whereHas('option', function($q) use($param){
                $q->where('option_id', '=', $param );
            });
        }
        
        foreach ($schoolSubject as $param)
        {
            $u = $u->whereHas('schoolQualification', function($q) use($param){
                $q->whereHas('type', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        
        foreach ($skills as $param)
        {
            $u = $u->whereHas('skill', function($q) use($param){
                $q->where('skill_id', '=', $param );
            });
        }
        
        foreach ($workTypes as $param)
        {
            $u = $u->whereHas('work', function($q) use($param){
                $q->whereHas('type', function($q) use($param){
                    $q->where('id', '=', $param);
                } );
            });
        }
        
        foreach ($socialCategory as $param)
        {
            $u = $u->whereHas('social', function($q) use($param){
                $q->whereHas('category', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        
        foreach ($degree_resultC as $param)
        {
            $u = $u->whereHas('degree', function($q) use($param){
                $q->whereHas('result', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        
        foreach ($degreeTypeC as $param)
        {
            $u = $u->whereHas('degree', function($q) use($param){
                $q->whereHas('type', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        foreach ($universitySubject as $param)
        {
            $u = $u->whereHas('degree', function($q) use($param){
                $q->whereHas('subject', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        foreach ($socialPosition as $param)
        {
            $u = $u->whereHas('social', function($q) use($param){
                $q->whereHas('position', function($q) use($param){
                    $q->where('id', '=', $param);
                });
            });
        }
        
        foreach ($sportLevels as $param)
        {
            $u = $u->whereHas('sport', function($q) use($param){
                $q->where('sport_level_id', '=', $param );
            });
        }
        
        foreach ($sportNames as $param)
        {
            $u = $u->whereHas('sport', function($q) use($param){
                $q->where('sport_name_id', '=', $param );
            });
        }
        
        foreach ($languages as $language)
        {
            $u = $u->whereHas('language', function($q) use($language, $languageLevels, $i){
                    $q = $q->whereHas('name', function($q)  use($language, $languageLevels, $i){
                        $q->where('name_id', '=', $language);
                        if( isset( $languageLevels[$i] ) )
                        {
                            $q = $q->where('level_id', '=', $languageLevels[$i]);
                        }
                    });
            });
            $i++;
        }
        $sqldata = $u->toSql();
        $userList = $u->select('id')->get();
        $users = array();
        foreach ($userList as $ul)
            $users[] = $ul->id;
        Session::put('candidates_pool_users', $users);
        $userList = implode( ',' , $users); 
        return ['userCount' => $u->count(), 'users' => $userList, 'sqldata' => $sqldata];
    }

    public function getCompanies()
    {
        return University::all();
    }

    public function getUniversities()
    {
        return $this->_getNamesForTextSearch('University');
    }

    function getDegreeSubjects()
    {
        return $this->_getNamesForTextSearch('DegreeSubject');
    }

    public function getUniversityDegrees()
    {
        return $this->_getNamesForTextSearch('DegreeType');
    }

    public function getSports()
    {
        return $this->_getNamesForTextSearch('SportName');
    }


    public function getSocials()
    {
        return $this->_getNamesForTextSearch('Social');
    }

    private function _getNamesForTextSearch($modelName)
    {
        $name = Input::get('q', '');
        return $modelName::where('name', 'LIKE', "$name%")->select(['id', 'name'])->get();
    }
}
